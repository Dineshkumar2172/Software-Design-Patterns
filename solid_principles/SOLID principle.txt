SOLID - solid principles are a set of five design principles in object oriented programming and software design. They
aim to make software more understandable, flexible and maintainable by following a structured approach.

1. S - Single Responsibility Principle (SRP)
2. O - Open-Closed Principle (OCP)
3. L - Liskov Substitution Principle (LSP)
4. I - Interface Segregation Principle (ISP)
5. D - Dependancy Inversion Principle (DIP)

Single Responsibility Principle

        1. A class should have only one reason to change, meaning it should have only one responsibility.

        Example: A user class should only handle user related logic, while database-related operations should be
        handled by a separate UserRepository class.

Open-Closed Principle

        1. Software entities (classes, modules and functions) should be open for extension but closed for modification.

        Example: Adding new functionality to a system using inheritance or composition without modifying existing code.

Liskov Substitution Principle

        1. The Liskov Substitution Principle states that objects of a superclass should be replaceable with objects of a subclass
           without altering the correctness of the program. It ensures that a subclass can stand in for its parent class and function
           correctly in any context that expects the parent class.

        2. No client should be forced to depend on methods it doesn't use. Split larger interfaces into smaller, more specific ones.


Interface Segregation Principle

        1. The Interface Segregation Principle ensures that classes are not burdened with methods thay don't need. It promotes
           better design by breaking large, general-purpose interfaces into smaller, more specific ones. It improves maintainability,
           flexibility and testability by ensuring that classes only have the dependancies they actually require.
