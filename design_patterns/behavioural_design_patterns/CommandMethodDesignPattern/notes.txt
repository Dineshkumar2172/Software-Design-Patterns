Imagine you're developing a basic text editor with buttons for bold, italic and underline text formatting.

Without the command pattern, the buttons directly interact with the TextEditor class, and you'd end up hardcoding behaviour into the UI classes, making them tightly coupled.

Problems in TextEditor implemented without using command pattern.

    1. Each button class is tightly coupled with the TextEditor. If the action changes, all button classes need to be modified.

    2. It's harder to extend with new commands or add functionality such as undo/redo or logging.

Command Pattern

    By introducing the command pattern, we can decouple the actions (bold, italic, underline) from the UI components (buttons), making the design more flexible and maintainable. The buttons no longer need to know about the editor directly but instead works with generic command objects,

Command Pattern Structure

    1. Command: Interface for executing operations.

    2. Invoker: Sends the command.

    3. Receiver: Performs the operation.

Command Pattern Benefits

    1. Decoupling of Invoker and Receiver: The button (invoker) doesn't know the details of the TextEditor (receiver), making the system more flexible and reusable.

    2. Command History and Undo: Commands can be logged for undo/redo functionality.

    3. Task Queuing: Commands can be stored in a queue and executed later, making it useful for task scheduling.

    4. Extensibility: New commands can be added easily without modifying existing code. For example, adding a ChangeColorCommand only required creating a new command class.